// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package receipt_diploma

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddPayment is the `addPayment` instruction.
type AddPayment struct {
	PaymentId        *string
	PaymentOwner     *ag_solanago.PublicKey
	PaymentSender    *ag_solanago.PublicKey
	PaymentTimestamp *uint64
	PaymentAmount    *uint64
	PaymentCurrency  *[3]uint8
	PaymentUrl       *string

	// [0] = [WRITE] payment
	//
	// [1] = [WRITE] paymentStorage
	//
	// [2] = [WRITE, SIGNER] owner
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddPaymentInstructionBuilder creates a new `AddPayment` instruction builder.
func NewAddPaymentInstructionBuilder() *AddPayment {
	nd := &AddPayment{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetPaymentId sets the "paymentId" parameter.
func (inst *AddPayment) SetPaymentId(paymentId string) *AddPayment {
	inst.PaymentId = &paymentId
	return inst
}

// SetPaymentOwner sets the "paymentOwner" parameter.
func (inst *AddPayment) SetPaymentOwner(paymentOwner ag_solanago.PublicKey) *AddPayment {
	inst.PaymentOwner = &paymentOwner
	return inst
}

// SetPaymentSender sets the "paymentSender" parameter.
func (inst *AddPayment) SetPaymentSender(paymentSender ag_solanago.PublicKey) *AddPayment {
	inst.PaymentSender = &paymentSender
	return inst
}

// SetPaymentTimestamp sets the "paymentTimestamp" parameter.
func (inst *AddPayment) SetPaymentTimestamp(paymentTimestamp uint64) *AddPayment {
	inst.PaymentTimestamp = &paymentTimestamp
	return inst
}

// SetPaymentAmount sets the "paymentAmount" parameter.
func (inst *AddPayment) SetPaymentAmount(paymentAmount uint64) *AddPayment {
	inst.PaymentAmount = &paymentAmount
	return inst
}

// SetPaymentCurrency sets the "paymentCurrency" parameter.
func (inst *AddPayment) SetPaymentCurrency(paymentCurrency [3]uint8) *AddPayment {
	inst.PaymentCurrency = &paymentCurrency
	return inst
}

// SetPaymentUrl sets the "paymentUrl" parameter.
func (inst *AddPayment) SetPaymentUrl(paymentUrl string) *AddPayment {
	inst.PaymentUrl = &paymentUrl
	return inst
}

// SetPaymentAccount sets the "payment" account.
func (inst *AddPayment) SetPaymentAccount(payment ag_solanago.PublicKey) *AddPayment {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payment).WRITE()
	return inst
}

// GetPaymentAccount gets the "payment" account.
func (inst *AddPayment) GetPaymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPaymentStorageAccount sets the "paymentStorage" account.
func (inst *AddPayment) SetPaymentStorageAccount(paymentStorage ag_solanago.PublicKey) *AddPayment {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(paymentStorage).WRITE()
	return inst
}

// GetPaymentStorageAccount gets the "paymentStorage" account.
func (inst *AddPayment) GetPaymentStorageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerAccount sets the "owner" account.
func (inst *AddPayment) SetOwnerAccount(owner ag_solanago.PublicKey) *AddPayment {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *AddPayment) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddPayment) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddPayment {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddPayment) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst AddPayment) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddPayment,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddPayment) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddPayment) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PaymentId == nil {
			return errors.New("PaymentId parameter is not set")
		}
		if inst.PaymentOwner == nil {
			return errors.New("PaymentOwner parameter is not set")
		}
		if inst.PaymentSender == nil {
			return errors.New("PaymentSender parameter is not set")
		}
		if inst.PaymentTimestamp == nil {
			return errors.New("PaymentTimestamp parameter is not set")
		}
		if inst.PaymentAmount == nil {
			return errors.New("PaymentAmount parameter is not set")
		}
		if inst.PaymentCurrency == nil {
			return errors.New("PaymentCurrency parameter is not set")
		}
		if inst.PaymentUrl == nil {
			return errors.New("PaymentUrl parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payment is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PaymentStorage is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddPayment) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddPayment")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=7]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       PaymentId", *inst.PaymentId))
						paramsBranch.Child(ag_format.Param("    PaymentOwner", *inst.PaymentOwner))
						paramsBranch.Child(ag_format.Param("   PaymentSender", *inst.PaymentSender))
						paramsBranch.Child(ag_format.Param("PaymentTimestamp", *inst.PaymentTimestamp))
						paramsBranch.Child(ag_format.Param("   PaymentAmount", *inst.PaymentAmount))
						paramsBranch.Child(ag_format.Param(" PaymentCurrency", *inst.PaymentCurrency))
						paramsBranch.Child(ag_format.Param("      PaymentUrl", *inst.PaymentUrl))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       payment", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("paymentStorage", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         owner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AddPayment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PaymentId` param:
	err = encoder.Encode(obj.PaymentId)
	if err != nil {
		return err
	}
	// Serialize `PaymentOwner` param:
	err = encoder.Encode(obj.PaymentOwner)
	if err != nil {
		return err
	}
	// Serialize `PaymentSender` param:
	err = encoder.Encode(obj.PaymentSender)
	if err != nil {
		return err
	}
	// Serialize `PaymentTimestamp` param:
	err = encoder.Encode(obj.PaymentTimestamp)
	if err != nil {
		return err
	}
	// Serialize `PaymentAmount` param:
	err = encoder.Encode(obj.PaymentAmount)
	if err != nil {
		return err
	}
	// Serialize `PaymentCurrency` param:
	err = encoder.Encode(obj.PaymentCurrency)
	if err != nil {
		return err
	}
	// Serialize `PaymentUrl` param:
	err = encoder.Encode(obj.PaymentUrl)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddPayment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PaymentId`:
	err = decoder.Decode(&obj.PaymentId)
	if err != nil {
		return err
	}
	// Deserialize `PaymentOwner`:
	err = decoder.Decode(&obj.PaymentOwner)
	if err != nil {
		return err
	}
	// Deserialize `PaymentSender`:
	err = decoder.Decode(&obj.PaymentSender)
	if err != nil {
		return err
	}
	// Deserialize `PaymentTimestamp`:
	err = decoder.Decode(&obj.PaymentTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `PaymentAmount`:
	err = decoder.Decode(&obj.PaymentAmount)
	if err != nil {
		return err
	}
	// Deserialize `PaymentCurrency`:
	err = decoder.Decode(&obj.PaymentCurrency)
	if err != nil {
		return err
	}
	// Deserialize `PaymentUrl`:
	err = decoder.Decode(&obj.PaymentUrl)
	if err != nil {
		return err
	}
	return nil
}

// NewAddPaymentInstruction declares a new AddPayment instruction with the provided parameters and accounts.
func NewAddPaymentInstruction(
	// Parameters:
	paymentId string,
	paymentOwner ag_solanago.PublicKey,
	paymentSender ag_solanago.PublicKey,
	paymentTimestamp uint64,
	paymentAmount uint64,
	paymentCurrency [3]uint8,
	paymentUrl string,
	// Accounts:
	payment ag_solanago.PublicKey,
	paymentStorage ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddPayment {
	return NewAddPaymentInstructionBuilder().
		SetPaymentId(paymentId).
		SetPaymentOwner(paymentOwner).
		SetPaymentSender(paymentSender).
		SetPaymentTimestamp(paymentTimestamp).
		SetPaymentAmount(paymentAmount).
		SetPaymentCurrency(paymentCurrency).
		SetPaymentUrl(paymentUrl).
		SetPaymentAccount(payment).
		SetPaymentStorageAccount(paymentStorage).
		SetOwnerAccount(owner).
		SetSystemProgramAccount(systemProgram)
}
