// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.3
// source: payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_CreatePayment_FullMethodName           = "/payment.PaymentService/CreatePayment"
	PaymentService_ExecutePayment_FullMethodName          = "/payment.PaymentService/ExecutePayment"
	PaymentService_GetPayment_FullMethodName              = "/payment.PaymentService/GetPayment"
	PaymentService_ListPayments_FullMethodName            = "/payment.PaymentService/ListPayments"
	PaymentService_CancelPayment_FullMethodName           = "/payment.PaymentService/CancelPayment"
	PaymentService_StoreInSolana_FullMethodName           = "/payment.PaymentService/StoreInSolana"
	PaymentService_InitSolanaStorage_FullMethodName       = "/payment.PaymentService/InitSolanaStorage"
	PaymentService_VerifySolanaTransaction_FullMethodName = "/payment.PaymentService/VerifySolanaTransaction"
	PaymentService_HandlePayPalWebhook_FullMethodName     = "/payment.PaymentService/HandlePayPalWebhook"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// Create a new payment with PayPal
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Execute a previously created payment after user approval
	ExecutePayment(ctx context.Context, in *ExecutePaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Get details of a specific payment
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// List payments with optional filters
	ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*ListPaymentsResponse, error)
	// Cancel a pending payment
	CancelPayment(ctx context.Context, in *CancelPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Store payment information in Solana (can be called separately or automatically)
	StoreInSolana(ctx context.Context, in *StoreInSolanaRequest, opts ...grpc.CallOption) (*StoreInSolanaResponse, error)
	InitSolanaStorage(ctx context.Context, in *InitSolanaStorageRequest, opts ...grpc.CallOption) (*InitSolanaStorageResponse, error)
	// Verify a Solana transaction
	VerifySolanaTransaction(ctx context.Context, in *VerifySolanaRequest, opts ...grpc.CallOption) (*VerifySolanaResponse, error)
	// Webhook handler for PayPal notifications
	HandlePayPalWebhook(ctx context.Context, in *PayPalWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ExecutePayment(ctx context.Context, in *ExecutePaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_ExecutePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*ListPaymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentsResponse)
	err := c.cc.Invoke(ctx, PaymentService_ListPayments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CancelPayment(ctx context.Context, in *CancelPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_CancelPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) StoreInSolana(ctx context.Context, in *StoreInSolanaRequest, opts ...grpc.CallOption) (*StoreInSolanaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreInSolanaResponse)
	err := c.cc.Invoke(ctx, PaymentService_StoreInSolana_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) InitSolanaStorage(ctx context.Context, in *InitSolanaStorageRequest, opts ...grpc.CallOption) (*InitSolanaStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitSolanaStorageResponse)
	err := c.cc.Invoke(ctx, PaymentService_InitSolanaStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) VerifySolanaTransaction(ctx context.Context, in *VerifySolanaRequest, opts ...grpc.CallOption) (*VerifySolanaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifySolanaResponse)
	err := c.cc.Invoke(ctx, PaymentService_VerifySolanaTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HandlePayPalWebhook(ctx context.Context, in *PayPalWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PaymentService_HandlePayPalWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	// Create a new payment with PayPal
	CreatePayment(context.Context, *CreatePaymentRequest) (*PaymentResponse, error)
	// Execute a previously created payment after user approval
	ExecutePayment(context.Context, *ExecutePaymentRequest) (*PaymentResponse, error)
	// Get details of a specific payment
	GetPayment(context.Context, *GetPaymentRequest) (*PaymentResponse, error)
	// List payments with optional filters
	ListPayments(context.Context, *ListPaymentsRequest) (*ListPaymentsResponse, error)
	// Cancel a pending payment
	CancelPayment(context.Context, *CancelPaymentRequest) (*PaymentResponse, error)
	// Store payment information in Solana (can be called separately or automatically)
	StoreInSolana(context.Context, *StoreInSolanaRequest) (*StoreInSolanaResponse, error)
	InitSolanaStorage(context.Context, *InitSolanaStorageRequest) (*InitSolanaStorageResponse, error)
	// Verify a Solana transaction
	VerifySolanaTransaction(context.Context, *VerifySolanaRequest) (*VerifySolanaResponse, error)
	// Webhook handler for PayPal notifications
	HandlePayPalWebhook(context.Context, *PayPalWebhookRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentServiceServer) ExecutePayment(context.Context, *ExecutePaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetPayment(context.Context, *GetPaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentServiceServer) ListPayments(context.Context, *ListPaymentsRequest) (*ListPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayments not implemented")
}
func (UnimplementedPaymentServiceServer) CancelPayment(context.Context, *CancelPaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayment not implemented")
}
func (UnimplementedPaymentServiceServer) StoreInSolana(context.Context, *StoreInSolanaRequest) (*StoreInSolanaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreInSolana not implemented")
}
func (UnimplementedPaymentServiceServer) InitSolanaStorage(context.Context, *InitSolanaStorageRequest) (*InitSolanaStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSolanaStorage not implemented")
}
func (UnimplementedPaymentServiceServer) VerifySolanaTransaction(context.Context, *VerifySolanaRequest) (*VerifySolanaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySolanaTransaction not implemented")
}
func (UnimplementedPaymentServiceServer) HandlePayPalWebhook(context.Context, *PayPalWebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePayPalWebhook not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ExecutePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ExecutePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ExecutePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ExecutePayment(ctx, req.(*ExecutePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ListPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListPayments(ctx, req.(*ListPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CancelPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CancelPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CancelPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CancelPayment(ctx, req.(*CancelPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_StoreInSolana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreInSolanaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).StoreInSolana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_StoreInSolana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).StoreInSolana(ctx, req.(*StoreInSolanaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_InitSolanaStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSolanaStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).InitSolanaStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_InitSolanaStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).InitSolanaStorage(ctx, req.(*InitSolanaStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_VerifySolanaTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySolanaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).VerifySolanaTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_VerifySolanaTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).VerifySolanaTransaction(ctx, req.(*VerifySolanaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HandlePayPalWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPalWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HandlePayPalWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_HandlePayPalWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HandlePayPalWebhook(ctx, req.(*PayPalWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentService_CreatePayment_Handler,
		},
		{
			MethodName: "ExecutePayment",
			Handler:    _PaymentService_ExecutePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentService_GetPayment_Handler,
		},
		{
			MethodName: "ListPayments",
			Handler:    _PaymentService_ListPayments_Handler,
		},
		{
			MethodName: "CancelPayment",
			Handler:    _PaymentService_CancelPayment_Handler,
		},
		{
			MethodName: "StoreInSolana",
			Handler:    _PaymentService_StoreInSolana_Handler,
		},
		{
			MethodName: "InitSolanaStorage",
			Handler:    _PaymentService_InitSolanaStorage_Handler,
		},
		{
			MethodName: "VerifySolanaTransaction",
			Handler:    _PaymentService_VerifySolanaTransaction_Handler,
		},
		{
			MethodName: "HandlePayPalWebhook",
			Handler:    _PaymentService_HandlePayPalWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
