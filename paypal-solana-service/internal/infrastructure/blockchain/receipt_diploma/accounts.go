// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package receipt_diploma

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type PaymentStorage struct {
	Owner      ag_solanago.PublicKey
	PaymentIds []string
}

var PaymentStorageDiscriminator = [8]byte{206, 98, 95, 2, 104, 60, 164, 210}

func (obj PaymentStorage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PaymentStorageDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `PaymentIds` param:
	err = encoder.Encode(obj.PaymentIds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PaymentStorage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PaymentStorageDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[206 98 95 2 104 60 164 210]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `PaymentIds`:
	err = decoder.Decode(&obj.PaymentIds)
	if err != nil {
		return err
	}
	return nil
}

type Payment struct {
	PaymentId        string
	PaymentOwner     ag_solanago.PublicKey
	PaymentSender    ag_solanago.PublicKey
	PaymentTimestamp uint64
	PaymentAmount    uint64
	PaymentCurrency  [3]uint8
	PaymentUrl       string
}

var PaymentDiscriminator = [8]byte{227, 231, 51, 26, 244, 88, 4, 148}

func (obj Payment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PaymentDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PaymentId` param:
	err = encoder.Encode(obj.PaymentId)
	if err != nil {
		return err
	}
	// Serialize `PaymentOwner` param:
	err = encoder.Encode(obj.PaymentOwner)
	if err != nil {
		return err
	}
	// Serialize `PaymentSender` param:
	err = encoder.Encode(obj.PaymentSender)
	if err != nil {
		return err
	}
	// Serialize `PaymentTimestamp` param:
	err = encoder.Encode(obj.PaymentTimestamp)
	if err != nil {
		return err
	}
	// Serialize `PaymentAmount` param:
	err = encoder.Encode(obj.PaymentAmount)
	if err != nil {
		return err
	}
	// Serialize `PaymentCurrency` param:
	err = encoder.Encode(obj.PaymentCurrency)
	if err != nil {
		return err
	}
	// Serialize `PaymentUrl` param:
	err = encoder.Encode(obj.PaymentUrl)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Payment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PaymentDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[227 231 51 26 244 88 4 148]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PaymentId`:
	err = decoder.Decode(&obj.PaymentId)
	if err != nil {
		return err
	}
	// Deserialize `PaymentOwner`:
	err = decoder.Decode(&obj.PaymentOwner)
	if err != nil {
		return err
	}
	// Deserialize `PaymentSender`:
	err = decoder.Decode(&obj.PaymentSender)
	if err != nil {
		return err
	}
	// Deserialize `PaymentTimestamp`:
	err = decoder.Decode(&obj.PaymentTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `PaymentAmount`:
	err = decoder.Decode(&obj.PaymentAmount)
	if err != nil {
		return err
	}
	// Deserialize `PaymentCurrency`:
	err = decoder.Decode(&obj.PaymentCurrency)
	if err != nil {
		return err
	}
	// Deserialize `PaymentUrl`:
	err = decoder.Decode(&obj.PaymentUrl)
	if err != nil {
		return err
	}
	return nil
}
